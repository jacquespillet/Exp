#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

vec2 random2(vec2 st){
    st = vec2( dot(st,vec2(127.1,311.7)),
              dot(st,vec2(269.5,183.3)) );
    return -1.0 + 2.0*fract(sin(st)*43758.5453123);
}

vec3 random3(vec3 st){
    st = vec3( dot(st,vec3(127.1,311.7, 69.4)),
               dot(st,vec3(269.5,183.3, 103.2)), 
               dot(st,vec3(301.5,241.6, 123.2)));
    return -1.0 + 2.0*fract(sin(st)*43758.5453123);
}

// Gradient Noise by Inigo Quilez - iq/2013
// https://www.shadertoy.com/view/XdXGW8
float noise2D(vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    vec2 u = f*f*(3.0-2.0*f);
	//u = smoothstep(0.0, 1.0, f);
    
    vec2 v00 = random2(i);
    vec2 v10 = random2(i + vec2(1, 0));
    vec2 v01 = random2(i + vec2(0, 1));
    vec2 v11 = random2(i + vec2(1, 1));
    
    vec2 v00p = f - vec2(0,0);
    vec2 v10p = f - vec2(1,0);
    vec2 v01p = f - vec2(0,1);
    vec2 v11p = f - vec2(1,1);
    
    float n00 = dot(v00, v00p);
    float n10 = dot(v10, v10p);
    float n01 = dot(v01, v01p);
    float n11 = dot(v11, v11p);
    
    float res00 = (1.0 - u.x) * (1.0-u.y) * n00;
    float res10 = (u.x) * (1.0-u.y) * n10;
    float res01 = (1.0 - u.x) * (u.y) * n01;
    float res11 = (u.x) * (u.y) * n11;
    
    return res00 + res10 + res01 + res11;
}

float noise3D(vec3 st) {
    vec3 i = floor(st);
    vec3 f = fract(st);

    vec3 u = f*f*(3.0-2.0*f);
	u = smoothstep(0.0, 1.0, f);
    
    vec3 v000 = random3(i);
    vec3 v100 = random3(i + vec3(1, 0, 0));
    vec3 v010 = random3(i + vec3(0, 1, 0));
    vec3 v110 = random3(i + vec3(1, 1, 0));
    
    vec3 v001 = random3(i + vec3(0, 0, 1));
    vec3 v101 = random3(i + vec3(1, 0, 1));
    vec3 v011 = random3(i + vec3(0, 1, 1));
    vec3 v111 = random3(i + vec3(1, 1, 1));
    
    
    
    vec3 v000p = f - vec3(0,0, 0);
    vec3 v100p = f - vec3(1,0, 0);
    vec3 v010p = f - vec3(0,1, 0);
    vec3 v110p = f - vec3(1,1, 0);
    
    vec3 v001p = f - vec3(0,0, 1);
    vec3 v101p = f - vec3(1,0, 1);
    vec3 v011p = f - vec3(0,1, 1);
    vec3 v111p = f - vec3(1,1, 1);
    
    
    float n000 = dot(v000, v000p);
    float n100 = dot(v100, v100p);
    float n010 = dot(v010, v010p);
    float n110 = dot(v110, v110p);
    
    float n001 = dot(v001, v001p);
    float n101 = dot(v101, v101p);
    float n011 = dot(v011, v011p);
    float n111 = dot(v111, v111p);
    
    float res000 = (1.0 - u.x) * (1.0-u.y) * (1.0 - u.z) * n000;
    float res100 = (u.x) * (1.0-u.y) * (1.0 - u.z)* n100;
    float res010 = (1.0 - u.x) * (u.y) * (1.0 - u.z)* n010;
    float res110 = (u.x) * (u.y) * (1.0 - u.z)* n110;
    
    
    float res001 = (1.0 - u.x) * (1.0-u.y) * (u.z) * n001;
    float res101 = (u.x) * (1.0-u.y) * (u.z)* n101;
    float res011 = (1.0 - u.x) * (u.y) * (u.z)* n011;
    float res111 = (u.x) * (u.y) * (u.z)* n111;
    // return 0.0;
    return res000 + res100 + res010 + res110 + res001 + res101 + res011 + res111;
}

float Sum ( vec3 point, float frequency, int octaves) {
    float lacunarity = 2.064;
    float persistence = 0.556;
    float sum = noise3D(point * frequency);
    float amplitude = 0.476;
    float range = 1.656;
    for (int o = 1; o < 5; o++) {
        frequency *= lacunarity;
        amplitude *= persistence;
        range += amplitude;
        sum += noise3D(point * frequency);
    }
    return sum / range;
}

void main() {
    vec2 st = gl_FragCoord.xy/u_resolution.xy;
    st.x *= u_resolution.x/u_resolution.y;
    vec3 color = vec3(0.0);

    vec2 pos = vec2(st*10.0);
    
    float frequency = 0.5;
    //color = vec3( noise2D(pos*frequency) + 0.5);
    float noise = Sum(vec3(pos, u_time * 0.5), 0.1, 10);
    color = vec3(noise);
    
    
    
//    color /=5.0;

    gl_FragColor = vec4(color,0.960);
}
